

let $logoSVG = $(".logo").find("svg");
let logoOffsetTop = $logoSVG.offset().top;

if ( /webkit.*mobile/i.test(navigator.userAgent)) {
    (function($) {
        $.fn.offsetOld = $.fn.offset;
        $.fn.offset = function() {
          var result = this.offsetOld();
          result.top -= window.scrollY;
          result.left -= window.scrollX;
          return result;
        };
    })(jQuery);
   // console.log("ios");
    logoOffsetTop = $logoSVG.offset().top;
  }

let contentSwiper;  
/* Set logoposition */


let docHeight = $(document).innerHeight();
let percentage = (logoOffsetTop + 71) / docHeight * 100 ;
//alert(logoOffsetTop+" "+docHeight+" "+percentage);
let logoWidth = $logoSVG.width();
let $loader = $(".loader");
$loader.css({
    "top": percentage+"%",
    "left":  "50%",
    "-webkit-transform": "translate(0%, -50%)",    
    "-ms-transform": "translate(0%, -50%)",
    "transform": "translate(0%, -50%)"
}); 

(function() {
    "use strict";

    /*
    DOM Declaration---------------------------------------------------------------------------------------------------------
     */
    var $body = $(document.body),
        $menuImages = $(".menu-image"),
        $mai;

    var LAZY_LOAD = $("[data-lazy]");

    //
    // Loader
    // --------------------------------------------------------

    var LOADER_TL;
    (function() {
        "use strict";

        var $loaderOverlay = $(".loader-overlay"),
            $loader = $loaderOverlay.children(),
            loaded = false,
            duration = 2,
            sp = 50,
            turnDuration = sp / 100 * duration,
            mainDuration = duration - turnDuration,
            drawTurn = "10px " + sp + "%";

        LOADER_TL = new TimelineMax({
            onComplete: function() {
                LOADER_TL.play("startRepeat");
                if (!loaded) {
                    return;
                }

                LOADER_TL.pause();
                TweenMax.to($loaderOverlay, 0.2, {
                    opacity: 0,
                    onComplete: function() {
                        $loaderOverlay.css({
                           background: "none",
                        });
                        $loaderOverlay.hide();
                        $body.addClass("loaded");
                    }
                });
            }
        });

        TweenLite.defaultEase = Linear.easeNone; // needed for seamless loops
        TweenMax.set("#master, #helper", {drawSVG: 0}); // start lines at 0
        TweenMax.set("#master", {strokeWidth: 10});
        TweenMax.set("#helper", {strokeWidth: 20});
        //TweenMax.set($loader, {left: logoOffset.left, top: logoOffset.top});

        LOADER_TL.to("#master", turnDuration, {drawSVG: drawTurn});
        LOADER_TL.add("startRepeat");
        LOADER_TL.to("#master", mainDuration, {drawSVG: 100 - sp + "% 100%" });
        LOADER_TL.add("overlap");
        LOADER_TL.to("#master", turnDuration, {drawSVG: "100% 100%" }, "overlap");
        LOADER_TL.to("#helper", turnDuration, {drawSVG: drawTurn}, "overlap");
        LOADER_TL.set("#master", {drawSVG: drawTurn});
        LOADER_TL.set("#helper", {drawSVG:"0% 0%"});


        $(window).on("load",function () {
            loaded = true;
        });

    }());

    //Declaration of DOM-Elements into variables
    //Declaration of DOM-Elements into variables
    var $outerWrapper =         $(".outer-wrapper");
    var $menuImages =           $(".menu-image");
    var $mainSwiperWrapper =    $(".main-swiper-wrapper");
    var $fixedSwiperWrapper =   $(".fixed-swiper-wrapper");
    var $whiteContainer =       $(".white-container");
    var $white =                $whiteContainer.children(".white");
    var $parallax =             $(".parallax");
    var $loadingscreen =        $(".loader");
    var $swiperClose =          $(".swiper-close");
    var $modals =               $(".modal");
    var $overlays = $(".overlay");

    //
    // CTA BTN
    // -------------------------------------------------------------------------------------------
    var CTA_TL;
    (function() {
        "use strict";
        let a;
        if (window.innerWidth < 1024) {
            a = 1;
                 
        } else {
            a = 0.5;
        }
         
        var $ctaWrapper = $(".cta-wrapper"),
            $cta = $ctaWrapper.children(".cta"),
            $bars = $ctaWrapper.find(".bar"),
            $barTop = $bars.filter(".top"),
            $barBottom = $bars.filter(".bottom"),
            barSize = $barTop.height(),
            topDistance = parseInt($ctaWrapper.css("padding-top").replace("px", ""), 10),
            bottomDistance = parseInt($ctaWrapper.css("padding-bottom").replace("px", ""), 10),

            velocity = a / $ctaWrapper.height(),

            barSpacing = 6,
            barDuration = barSize * velocity;

            //barDuration*= 10;            

        CTA_TL = new TimelineMax({repeat: -1});
        CTA_TL.addCallback(function() {
            barSize = $barTop.height();
            topDistance = parseInt($ctaWrapper.css("padding-top").replace("px", ""), 10);
            bottomDistance = parseInt($ctaWrapper.css("padding-bottom").replace("px", ""), 10);
            velocity = 0.3 / $ctaWrapper.height();
            barDuration = barSize * velocity;
        });
        CTA_TL.add(TweenMax.set($barTop, {scaleY: 1, y: 0, transformOrigin: "center bottom"}));
        CTA_TL.add(TweenMax.set($barTop.children(), {scaleY: 0, transformOrigin: "center top"}));
        CTA_TL.add(TweenMax.set($barBottom, {scaleY: 0, y: barSpacing + barSize - bottomDistance, transformOrigin: "center top"}));
        CTA_TL.add(TweenMax.set($barBottom.children(), {scaleY: 1, transformOrigin: "center bottom"}));

        CTA_TL.add(TweenMax.to($barTop.children(), barDuration, {scaleY: 1}));
        CTA_TL.add(TweenMax.to($barTop, topDistance * velocity, {y: topDistance - barSize - barSpacing}));
        CTA_TL.add(TweenMax.to($barTop, barDuration, {scaleY: 0}));
        CTA_TL.add(TweenMax.to($barBottom, barDuration, {scaleY: 1}));
        CTA_TL.add(TweenMax.to($barBottom, (bottomDistance - barSize) * velocity, {y: 0}));
        CTA_TL.add(TweenMax.to($barBottom.children(), barDuration, {scaleY: 0}));
    }());


    /*
    Initialazations---------------------------------------------------------------------------------------------------------
     */

    // Initialize Parallax Scrolling

    var activateParallax = false;

    if (activateParallax) {
        var parallaxObject = parallaxObjectArray = [];

        parallaxObject = new Parallax($parallax[0], {
            originX: 0.2,
            originY: 0.5,
            invertX: false
        });
        parallaxObjectArray.push(parallaxObject);
        parallaxObject.disable();

        parallaxObject = new Parallax($parallax[1], {
            originX: 0.4,
            originY: 0.1,
            invertY: false
        });
        parallaxObjectArray.push(parallaxObject);
        parallaxObject.disable();

        parallaxObject = new Parallax($parallax[2], {
            originX: 0.8,
            originY: 0.5,
            invertX: false
        });
        parallaxObjectArray.push(parallaxObject);
        parallaxObject.disable();

        parallaxObject = new Parallax($parallax[3], {
            originX: 0.6,
            originY: 0.6,
            invertX: false
        });
        parallaxObjectArray.push(parallaxObject);
        parallaxObject.disable();
    }



    var fixedSwipers = [];

    $fixedSwiperWrapper.children(".swiper-container").each(function() {

        var id = $(this).parents(".overlay").attr("id");

        fixedSwipers.push(new Swiper(this, {
            loop: true,
            keyboard: true,
            simulateTouch:true,
            /*
            observer : {
                observer:true,
                observeParents:true
            },
            */
            pagination: {
                el: '.swiper-pagination',
                type: 'bullets',
                clickable: 'true',

                renderBullet: function (index, className) {
                    return '<span class="' + className + '"></span>';
                }
            },
            navigation: {
                nextEl: '#' + id + ' .next',
                prevEl: '#' + id + ' .prev'
            },
            on: {
                slideChange: function() {
                    preloadVisibleImages();
                }
            }
        }));
    });

    // Initializes the main content vertical slider
    contentSwiper = new Swiper($(".main-swiper"), {
        resistanceRatio: 0.5,
        direction: "vertical",
        slidesPerView: 'auto',
        mousewheel: {
            invert: false
        },
        /*
        hashNavigation: {
            replaceState: true
        },
        on: {
            init: function(swiper) {
                toggleCtaTimeline(this.activeIndex);
                if (this.activeIndex !== 0) {
                    //console.log("updateVIrtualSlide");
                    TweenMax.set($(".virtual-slide"), {y: "-100%"});
                }

                //console.log("onInit", this.activeIndex, this.activeIndex !== 0);
            }
        }
        */
    });

    /*
    Eventlisteners----------------------------------------------------------------------------------------------------------
     */

    contentSwiper.on("init", function() {
        //console.log("onInit");
    });

    contentSwiper.on("transitionStart", function () {
        var index = contentSwiper.activeIndex;

        var el = $(".main-swiper").get(0);
        el.className = $.trim(el.className.replace(/step\-\d/ig, "")) + (" step-" + index);

        el = $whiteContainer.get(0);
        el.className = $.trim(el.className.replace(/step\-\d/ig, "")) + (" step-" + index);
    });

    contentSwiper.on("slideChange", function() {
        if (!CTA_TL) {
            return;
        }

        toggleCtaTimeline(contentSwiper.activeIndex);
        preloadVisibleImages();
    });

    contentSwiper.on("setTranslate", function(translate) {
        TweenMax.set($(".virtual-slide"), {y: translate});
    });

    $body.on("click", "[data-slide-to]", function(e) {
        e.preventDefault();
        var $t = $(this),
            i = parseInt($t.data("slide-to"), 10);

        if (isNaN(i)) {
            i = contentSwiper.activeIndex + 1;
        }

        if (i >= contentSwiper.slides.length) {
            i = contentSwiper.slides.length - 1;
        }

        contentSwiper.slideTo(i);
    });

    /*
        Creates a fixed positioned div with the clicked containers properties.
        It get's appended to the body and is used for the transition.

        $div        DOM-Object
        imgHeight   Height of the clicked image
        imgWidth    Width ...
        posTop      TopOffset of the image to the document
        posLeft     LeftOffset ...
        winHeight   Height of the monitor
        winWidth    Width ...
        img         Imagesource
      */
    var
        $div,
        imgHeight,
        imgWidth,
        winHeight,
        winWidth,
        posTop,
        posLeft,
        img;


    $("#overlay-idea video").get(0).addEventListener("ended", function(e) {
        $(this).parents(".overlay").find(".btn-close").trigger("click");
    });

    $menuImages.on("click", ".container", function (e) {

        e.stopPropagation();

        var $t = $(this),
            $p = $t.parents(".menu-image"),
            target = $p.data("target-overlay"),
            index = $menuImages.index($p),
            $targetSwiper = $fixedSwiperWrapper.eq(index);

        if ($t.hasClass("open-modal")) {
            onClickOpenModal.call($t.parents("[data-modal-target]").get(0), e);
            return;
        }

        if (!target) {
            return;
        }


        var $targetOverlay = $overlays.filter("#" + target),
            video = $targetOverlay.children("video");

        if (video.length) {
            video.get(0).play();
        }

        if (target === "overlay-menu") {
            showOverlay($targetOverlay, function() {

            });


            $targetOverlay.one("click", function(e) {
               $targetOverlay.transition({
                   opacity: 0,
                   easing: "cubic-bezier(0.62, 0.305, 0.045, 0.775)"
               }, function(e) {
                   $targetOverlay.css("left", "-100%");
               });
            });

            return;
        }


        var $scaleClone = scaleUpFromObj(this, function () {
            showOverlay($targetOverlay, function() {
                $scaleClone.css({
                    opacity: 0
                });
            });
        });

        $targetOverlay.one("click", ".btn-close", function(e) {
            var currentImageUrl;
            if ($targetOverlay.hasClass("swiper-overlay")) {
                currentImageUrl = getImageUrl($targetSwiper.find(".swiper-slide-active"));

                $scaleClone.css({
                    backgroundImage: "url('" + currentImageUrl + "')"
                });
            }

            var video = $targetOverlay.children("video");
            if (video.length) {
                video.get(0).pause();
            }

            var tl = new TimelineMax();
            tl.add(
                TweenMax.to($scaleClone, 0.1, {
                   opacity: 1
                })
            );
            tl.add(
                TweenMax.to($targetOverlay, 0.1, {
                    opacity: 0,
                    onComplete: function() {
                        $targetOverlay.css("left", "-100%");
                    }
                })
            );

            tl.addCallback(function () {
                $scaleClone.transition({
                    height: imgHeight,
                    width: imgWidth,
                    top: posTop,
                    left: posLeft,
                    easing: "cubic-bezier(0.62, 0.305, 0.045, 0.775)",
                    duration: 250,
                }, function() {
                    if (currentImageUrl) {
                        $t.find(".image img").attr("src", currentImageUrl);
                    }
                }).transition({
                    opacity: 0,
                    duration: 100
                }, function() {
                    $scaleClone.remove();
                });
            });

        });


        return;
    });

    //
    // Modals
    // -------------------------------------------------------------------------------------------

    //Open handler
    $body.on("click", "[data-modal-target]", onClickOpenModal);

    //Closehandler
    $modals.on("click", ".btn-close", onClickCloseModal);


    function showModal($modal) {
        var $content = $modal.find(".modal-inner");

        $body.addClass("modal-active");
        $modal.addClass("opened");

        TweenMax.set($content, {y: 50, opacity: 0});
        $modal.css({display: "block"});
        TweenMax.to($modal, 0.15, {opacity: 1});
        TweenMax.to($content, 0.2, {
            y: 0,
            opacity: 1,
            ease: Power1.easeOut
        });
    }

    function hideModal($modal) {
        var $content = $modal.find(".modal-inner");

        TweenMax.to($content, 0.2, {
            y: 50,
            opacity: 0,
            ease: Power1.easeOut, onComplete: function() {
                $body.removeClass("modal-active");
                TweenMax.to($modal, 0.15, {opacity: 0, onComplete: function() {
                    $modal.hide();
                }});
            }
        });


    }

    function hideModals() {
        $modals.filter(".opened").each(function() {
            hideModal($(this));
        });
    }

    function onClickOpenModal(e) {
        e.preventDefault();
        var $t = $(this),
            modalId = $.trim($t.data("modal-target"));

        //console.log("click modal", $t);
        if (!modalId) {
            //console.log("modalId", modalId);
            return;
        }

        var $target = $modals.filter("#" + modalId);


        if ($body.hasClass("modal-active")) {
            //Hide active modals
            hideModals();
        }

        showModal($target);
    }

    function onClickCloseModal(e) {
        hideModals();
    }

    function scaleUpFromObj($obj, callback) {

        var transit = {
            duration: 300,
            easing: "cubic-bezier(0.62, 0.305, 0.045, 0.775)",
            width: window.innerWidth,
            height: window.innerHeight,
            left: 0,
            top: 0
        };

        imgHeight   = $($obj).height();
        imgWidth    = $($obj).width();
        posTop      = $($obj).children().children().offset().top;
        posLeft     = $($obj).children().children().offset().left;
        img         = $($obj).find(".image").children().attr("src");

        $div = $("<div></div>").addClass("open-swiper-transition-clone").css({
            height: imgHeight,
            width: imgWidth,
            top: posTop,
            left: posLeft,
            backgroundImage: "url(" + img + ")",
        });


        $("body").append($div);

        $div.transition(transit, callback);

        return $div;
    }

    function scaleDownFromObj(callback) {
        $div.transition({
            height: imgHeight,
            width: imgWidth,
            top: posTop,
            left: posLeft,
            duration: 300,
            easing: "cubic-bezier(0.62, 0.305, 0.045, 0.775)",
        }, function () {
            $div.remove();
        });

        if (callback) callback();
    }

    function getImageUrl($el) {
        //console.log("getImageUrl", $el.get(0));
        if ($el.is("img")) {
            return $el.attr("src");
        }

        var style = $el.css("background-image").replace(/[\"\'\;]+/ig, "");

        return style ? style.slice(4, -1) : false;
    }

    function toggleCtaTimeline(activeIndex) {
        if (activeIndex !== 0) {
            CTA_TL.pause();
            CTA_TL.seek();
        } else {
            CTA_TL.play();
        }
    }

    function preloadImage(url, callback) {
        var img = new Image();
        if (callback) {
            img.onload = callback;
        }

        img.src = url;
    }

    function preloadVisibleImages() {
        var minX = -window.innerWidth,
            maxX = window.innerWidth * 2,
            minY = -window.innerHeight,
            maxY = window.innerHeight * 2;


       LAZY_LOAD = $("[data-lazy]").not(".lazy-loading, .lazy-loaded").filter(function(i, el) {
            var $el = $(el),
                url = getImagePathFromSet($(el).data("lazy")),
                boundings = el.getBoundingClientRect(),
                $slide =  $el.hasClass("swiper-slide") ? $el : $el.parents(".swiper-slide");
               

            if ($slide.length && ($slide.hasClass("swiper-slide-active") || $slide.hasClass("swiper-slide-next") || $slide.hasClass("swiper-slide-prev"))) {
                $el.addClass("lazy-loading");


                
                preloadImage(url, function() {
                    $el.removeClass("lazy-loading")
                        .addClass("lazy-loaded")
                        .css("background-image", "url('" + url + "')");
                });
                return false;
            }

            return true;
        });
    }

    function getImagePathFromSet(str) {
        var parts, diff, src;
        if (str.indexOf(",") === -1) {
            return src;
        }

        parts = str.split(/\,\s+/ig).map(function(src) {
            var p = src.split(" ");
            return {
                src: p[0],
                size: parseInt(p[1])
            };
        });

        parts.forEach(function(value, index) {
            var d = Math.abs(window.innerWidth - value.size);

            if (!diff || d < diff) {
                diff = d;
                src = value.src;
            }
        });

        return src;

    }

    function showOverlay($overlay, callback) {
        $overlay.css("left", 0);
        $overlay.transition({
            duration: 250,
            opacity: 1,
            easing: "cubic-bezier(0.62, 0.305, 0.045, 0.775)",
        }, callback);
    }


    var oldWidth = false;
    $(window).on("resize", function(e) {
        var rect = $("#logo-upper").get(0).getBoundingClientRect();

        if (rect.width !== oldWidth) {
            oldWidth = rect.width;
            //console.log(window.innerWidth, rect);
        }

    });



}());
